/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: auth_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./user";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auth {
    export class AuthenticateAccessTokenResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: dependency_1.auth.User;
            role_permission?: RolePermission;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("role_permission" in data && data.role_permission != undefined) {
                    this.role_permission = data.role_permission;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, dependency_1.auth.User, 1) as dependency_1.auth.User;
        }
        set user(value: dependency_1.auth.User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get role_permission() {
            return pb_1.Message.getWrapperField(this, RolePermission, 2) as RolePermission;
        }
        set role_permission(value: RolePermission) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_role_permission() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof dependency_1.auth.User.prototype.toObject>;
            role_permission?: ReturnType<typeof RolePermission.prototype.toObject>;
        }): AuthenticateAccessTokenResponse {
            const message = new AuthenticateAccessTokenResponse({});
            if (data.user != null) {
                message.user = dependency_1.auth.User.fromObject(data.user);
            }
            if (data.role_permission != null) {
                message.role_permission = RolePermission.fromObject(data.role_permission);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof dependency_1.auth.User.prototype.toObject>;
                role_permission?: ReturnType<typeof RolePermission.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.role_permission != null) {
                data.role_permission = this.role_permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.has_role_permission)
                writer.writeMessage(2, this.role_permission, () => this.role_permission.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateAccessTokenResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateAccessTokenResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = dependency_1.auth.User.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.role_permission, () => message.role_permission = RolePermission.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateAccessTokenResponse {
            return AuthenticateAccessTokenResponse.deserialize(bytes);
        }
    }
    export class FindByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): FindByIdRequest {
            const message = new FindByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeInt64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindByIdRequest {
            return FindByIdRequest.deserialize(bytes);
        }
    }
    export class AuthenticateAccessTokenRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_token" in data && data.access_token != undefined) {
                    this.access_token = data.access_token;
                }
            }
        }
        get access_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set access_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            access_token?: string;
        }): AuthenticateAccessTokenRequest {
            const message = new AuthenticateAccessTokenRequest({});
            if (data.access_token != null) {
                message.access_token = data.access_token;
            }
            return message;
        }
        toObject() {
            const data: {
                access_token?: string;
            } = {};
            if (this.access_token != null) {
                data.access_token = this.access_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_token.length)
                writer.writeString(1, this.access_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateAccessTokenRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateAccessTokenRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.access_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateAccessTokenRequest {
            return AuthenticateAccessTokenRequest.deserialize(bytes);
        }
    }
    export class FindRolePermissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            role?: string;
        }): FindRolePermissionRequest {
            const message = new FindRolePermissionRequest({});
            if (data.role != null) {
                message.role = data.role;
            }
            return message;
        }
        toObject() {
            const data: {
                role?: string;
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role.length)
                writer.writeString(1, this.role);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindRolePermissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindRolePermissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FindRolePermissionRequest {
            return FindRolePermissionRequest.deserialize(bytes);
        }
    }
    export class Permission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resource?: string;
            action?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
            }
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            resource?: string;
            action?: string;
        }): Permission {
            const message = new Permission({});
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            return message;
        }
        toObject() {
            const data: {
                resource?: string;
                action?: string;
            } = {};
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resource.length)
                writer.writeString(1, this.resource);
            if (this.action.length)
                writer.writeString(2, this.action);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Permission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Permission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resource = reader.readString();
                        break;
                    case 2:
                        message.action = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Permission {
            return Permission.deserialize(bytes);
        }
    }
    export class RolePermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            role?: string;
            permissions?: Permission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("role" in data && data.role != undefined) {
                    this.role = data.role;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get role() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set role(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get permissions() {
            return pb_1.Message.getRepeatedWrapperField(this, Permission, 2) as Permission[];
        }
        set permissions(value: Permission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            role?: string;
            permissions?: ReturnType<typeof Permission.prototype.toObject>[];
        }): RolePermission {
            const message = new RolePermission({});
            if (data.role != null) {
                message.role = data.role;
            }
            if (data.permissions != null) {
                message.permissions = data.permissions.map(item => Permission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                role?: string;
                permissions?: ReturnType<typeof Permission.prototype.toObject>[];
            } = {};
            if (this.role != null) {
                data.role = this.role;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions.map((item: Permission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.role.length)
                writer.writeString(1, this.role);
            if (this.permissions.length)
                writer.writeRepeatedMessage(2, this.permissions, (item: Permission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RolePermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RolePermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.role = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.permissions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Permission.deserialize(reader), Permission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RolePermission {
            return RolePermission.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            FindUserById: {
                path: "/auth.AuthService/FindUserById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindByIdRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindByIdRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.auth.User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.auth.User.deserialize(new Uint8Array(bytes))
            },
            CreateUser: {
                path: "/auth.AuthService/CreateUser",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.auth.CreateUserRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.auth.CreateUserRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.auth.User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.auth.User.deserialize(new Uint8Array(bytes))
            },
            FindUserByEmail: {
                path: "/auth.AuthService/FindUserByEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.auth.FindUserByEmailRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.auth.FindUserByEmailRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.auth.User) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.auth.User.deserialize(new Uint8Array(bytes))
            },
            AuthenticateAccessToken: {
                path: "/auth.AuthService/AuthenticateAccessToken",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthenticateAccessTokenRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthenticateAccessTokenRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateAccessTokenResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateAccessTokenResponse.deserialize(new Uint8Array(bytes))
            },
            FindRolePermission: {
                path: "/auth.AuthService/FindRolePermission",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FindRolePermissionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FindRolePermissionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RolePermission) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RolePermission.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract FindUserById(call: grpc_1.ServerUnaryCall<FindByIdRequest, dependency_1.auth.User>, callback: grpc_1.sendUnaryData<dependency_1.auth.User>): void;
        abstract CreateUser(call: grpc_1.ServerUnaryCall<dependency_1.auth.CreateUserRequest, dependency_1.auth.User>, callback: grpc_1.sendUnaryData<dependency_1.auth.User>): void;
        abstract FindUserByEmail(call: grpc_1.ServerUnaryCall<dependency_1.auth.FindUserByEmailRequest, dependency_1.auth.User>, callback: grpc_1.sendUnaryData<dependency_1.auth.User>): void;
        abstract AuthenticateAccessToken(call: grpc_1.ServerUnaryCall<AuthenticateAccessTokenRequest, AuthenticateAccessTokenResponse>, callback: grpc_1.sendUnaryData<AuthenticateAccessTokenResponse>): void;
        abstract FindRolePermission(call: grpc_1.ServerUnaryCall<FindRolePermissionRequest, RolePermission>, callback: grpc_1.sendUnaryData<RolePermission>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        FindUserById: GrpcUnaryServiceInterface<FindByIdRequest, dependency_1.auth.User> = (message: FindByIdRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, callback?: grpc_1.requestCallback<dependency_1.auth.User>): grpc_1.ClientUnaryCall => {
            return super.FindUserById(message, metadata, options, callback);
        };
        CreateUser: GrpcUnaryServiceInterface<dependency_1.auth.CreateUserRequest, dependency_1.auth.User> = (message: dependency_1.auth.CreateUserRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, callback?: grpc_1.requestCallback<dependency_1.auth.User>): grpc_1.ClientUnaryCall => {
            return super.CreateUser(message, metadata, options, callback);
        };
        FindUserByEmail: GrpcUnaryServiceInterface<dependency_1.auth.FindUserByEmailRequest, dependency_1.auth.User> = (message: dependency_1.auth.FindUserByEmailRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.auth.User>, callback?: grpc_1.requestCallback<dependency_1.auth.User>): grpc_1.ClientUnaryCall => {
            return super.FindUserByEmail(message, metadata, options, callback);
        };
        AuthenticateAccessToken: GrpcUnaryServiceInterface<AuthenticateAccessTokenRequest, AuthenticateAccessTokenResponse> = (message: AuthenticateAccessTokenRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateAccessTokenResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateAccessTokenResponse>, callback?: grpc_1.requestCallback<AuthenticateAccessTokenResponse>): grpc_1.ClientUnaryCall => {
            return super.AuthenticateAccessToken(message, metadata, options, callback);
        };
        FindRolePermission: GrpcUnaryServiceInterface<FindRolePermissionRequest, RolePermission> = (message: FindRolePermissionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RolePermission>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RolePermission>, callback?: grpc_1.requestCallback<RolePermission>): grpc_1.ClientUnaryCall => {
            return super.FindRolePermission(message, metadata, options, callback);
        };
    }
}
